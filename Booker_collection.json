{
  "collection": {
    "info": {
      "_postman_id": "2ed7b105-370c-4ed2-9a26-edf98cc8fc9a",
      "name": "Booker",
      "description": "[https://restful-booker.herokuapp.com/apidoc/](https://restful-booker.herokuapp.com/apidoc/)",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "updatedAt": "2025-08-21T10:30:30.000Z",
      "createdAt": "2024-06-11T07:04:51.000Z",
      "lastUpdatedBy": "18615958",
      "uid": "18615958-2ed7b105-370c-4ed2-9a26-edf98cc8fc9a"
    },
    "item": [
      {
        "name": "Auth",
        "item": [
          {
            "name": "CreateToken",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "876263f7-4eb9-482f-82a5-9850db26f9aa",
                  "exec": [
                    "pm.test(\"Response status code is 200\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(200);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response has the required fields\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.token).to.exist;\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Token is a non-empty string\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Content-Type header is application/json\", function () {\r",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
                    "});\r",
                    ""
                  ],
                  "type": "text/javascript",
                  "packages": {}
                }
              }
            ],
            "id": "1cf9b941-4a08-4b8a-984e-a63084679cec",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "POST",
              "header": [],
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "username",
                    "value": "admin",
                    "type": "text"
                  },
                  {
                    "key": "password",
                    "value": "password123",
                    "type": "text"
                  }
                ]
              },
              "url": {
                "raw": "{{url}}/auth",
                "host": [
                  "{{url}}"
                ],
                "path": [
                  "auth"
                ]
              }
            },
            "response": [],
            "uid": "18615958-1cf9b941-4a08-4b8a-984e-a63084679cec"
          }
        ],
        "id": "b34eebe2-485a-491f-ad14-47654ba9e781",
        "uid": "18615958-b34eebe2-485a-491f-ad14-47654ba9e781"
      },
      {
        "name": "Booking",
        "item": [
          {
            "name": "GetBooking-Ids",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "044d3cc8-40be-4043-8a5e-3a99ea7eacee",
                  "exec": [
                    "pm.test(\"Response status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    "pm.test(\"Booking response has the required schema\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData).to.be.an('array');\r",
                    "    responseData.forEach(function (booking) {\r",
                    "        pm.expect(booking).to.have.property('bookingid').that.is.a('number');\r",
                    "    });\r",
                    "});\r",
                    ""
                  ],
                  "type": "text/javascript",
                  "packages": {}
                }
              }
            ],
            "id": "e2de1b72-083a-4589-90d6-47fa9a6544fe",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{url}}/booking",
                "host": [
                  "{{url}}"
                ],
                "path": [
                  "booking"
                ]
              }
            },
            "response": [],
            "uid": "18615958-e2de1b72-083a-4589-90d6-47fa9a6544fe"
          },
          {
            "name": "CreateBooking",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d8423bd3-ee0b-42d2-b10b-df00edb26929",
                  "exec": [
                    "// menambahkan 'valid_ID' kedalam environment\r",
                    "pm.environment.set('valid_ID', parseInt(pm.response.json().bookingid))\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response status code is 200\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(200);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response content type is application/json\", function () {\r",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Booking object is valid\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.booking).to.exist.and.to.be.an('object');\r",
                    "    pm.expect(responseData.booking.firstname).to.exist.and.to.be.a('string');\r",
                    "    pm.expect(responseData.booking.lastname).to.exist.and.to.be.a('string');\r",
                    "    pm.expect(responseData.booking.totalprice).to.exist.and.to.be.a('number');\r",
                    "    pm.expect(responseData.booking.depositpaid).to.exist.and.to.be.a('boolean');\r",
                    "    pm.expect(responseData.booking.bookingdates).to.exist.and.to.be.an('object');\r",
                    "    pm.expect(responseData.booking.bookingdates.checkin).to.exist.and.to.be.a('string');\r",
                    "    pm.expect(responseData.booking.bookingdates.checkout).to.exist.and.to.be.a('string');\r",
                    "    pm.expect(responseData.booking.additionalneeds).to.exist.and.to.be.a('string');\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Bookingid is a non-negative integer\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData.bookingid).to.be.a('number').and.to.be.at.least(0);\r",
                    "});\r",
                    "\r",
                    ""
                  ],
                  "type": "text/javascript",
                  "packages": {}
                }
              }
            ],
            "id": "98687a88-640f-490a-b92c-cdeaa6c8168f",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "POST",
              "header": [],
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Test\",\r\n    \"lastname\" : \"Tost\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "url": {
                "raw": "{{url}}/booking",
                "host": [
                  "{{url}}"
                ],
                "path": [
                  "booking"
                ]
              }
            },
            "response": [],
            "uid": "18615958-98687a88-640f-490a-b92c-cdeaa6c8168f"
          },
          {
            "name": "GetBooking",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "07ce3dc3-493f-4482-b3be-45031ec4de33",
                  "exec": [
                    "pm.test(\"Response status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response time is less than 500ms\", function () {\r",
                    "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response has the required fields\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.firstname).to.exist;\r",
                    "    pm.expect(responseData.lastname).to.exist;\r",
                    "    pm.expect(responseData.totalprice).to.exist;\r",
                    "    pm.expect(responseData.depositpaid).to.exist;\r",
                    "    pm.expect(responseData.bookingdates).to.exist;\r",
                    "    pm.expect(responseData.additionalneeds).to.exist;\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Checkin and checkout dates are in a valid date format\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.bookingdates.checkin).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                    "    pm.expect(responseData.bookingdates.checkout).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Content-Type header is application/json\", function () {\r",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                    "});\r",
                    ""
                  ],
                  "type": "text/javascript",
                  "packages": {}
                }
              }
            ],
            "id": "ce37a97a-1a51-4da7-b228-4f6083d5a33c",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{url}}/booking/{{valid_ID}}",
                "host": [
                  "{{url}}"
                ],
                "path": [
                  "booking",
                  "{{valid_ID}}"
                ]
              }
            },
            "response": [],
            "uid": "18615958-ce37a97a-1a51-4da7-b228-4f6083d5a33c"
          },
          {
            "name": "UpdateBooking",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e07d039b-d55f-447b-a4ba-8599982871cb",
                  "exec": [
                    "pm.test(\"Response status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response has the required fields\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData).to.have.property('firstname');\r",
                    "    pm.expect(responseData).to.have.property('lastname');\r",
                    "    pm.expect(responseData).to.have.property('totalprice');\r",
                    "    pm.expect(responseData).to.have.property('depositpaid');\r",
                    "    pm.expect(responseData).to.have.property('bookingdates');\r",
                    "    pm.expect(responseData).to.have.property('additionalneeds');\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Checkin and checkout dates are in a valid date format\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.bookingdates.checkin).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                    "    pm.expect(responseData.bookingdates.checkout).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Firstname and lastname should be non-empty strings\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.firstname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Firstname should be a non-empty string\");\r",
                    "    pm.expect(responseData.lastname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Lastname should be a non-empty string\");\r",
                    "});\r",
                    ""
                  ],
                  "type": "text/javascript",
                  "packages": {}
                }
              }
            ],
            "id": "b47420e9-bc4d-4063-8bde-f7baf04dce9c",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "auth": {
                "type": "noauth"
              },
              "method": "PUT",
              "header": [
                {
                  "key": "Cookie",
                  "value": "token=<token_value>"
                },
                {
                  "key": "Authorization",
                  "value": "Basic YWRtaW46cGFzc3dvcmQxMjM="
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Sponge\",\r\n    \"lastname\" : \"Bob\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "url": {
                "raw": "{{url}}/booking/{{valid_ID}}",
                "host": [
                  "{{url}}"
                ],
                "path": [
                  "booking",
                  "{{valid_ID}}"
                ]
              }
            },
            "response": [],
            "uid": "18615958-b47420e9-bc4d-4063-8bde-f7baf04dce9c"
          },
          {
            "name": "PartialUpdateBooking",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "53039e16-5195-4154-b85a-28b754c4eed2",
                  "exec": [
                    "pm.test(\"Response status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response has the required fields - firstname, lastname, totalprice, depositpaid, bookingdates, additionalneeds\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData).to.have.property('firstname');\r",
                    "    pm.expect(responseData).to.have.property('lastname');\r",
                    "    pm.expect(responseData).to.have.property('totalprice');\r",
                    "    pm.expect(responseData).to.have.property('depositpaid');\r",
                    "    pm.expect(responseData).to.have.property('bookingdates');\r",
                    "    pm.expect(responseData).to.have.property('additionalneeds');\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Checkin and checkout dates are in a valid date format\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.bookingdates.checkin).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                    "    pm.expect(responseData.bookingdates.checkout).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Totalprice is a non-negative integer\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData.totalprice).to.be.a('number');\r",
                    "    pm.expect(responseData.totalprice).to.be.at.least(0);\r",
                    "});\r",
                    ""
                  ],
                  "type": "text/javascript",
                  "packages": {}
                }
              }
            ],
            "id": "ae25708d-9c22-4b82-879c-df89b45deb9d",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "PATCH",
              "header": [
                {
                  "key": "Cookie",
                  "value": "token=<token_value>"
                },
                {
                  "key": "Authorization",
                  "value": "Basic YWRtaW46cGFzc3dvcmQxMjM="
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"firstname\" : \"Gusti\",\r\n    \"lastname\" : \"Ramadhan\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "url": {
                "raw": "{{url}}/booking/{{valid_ID}}",
                "host": [
                  "{{url}}"
                ],
                "path": [
                  "booking",
                  "{{valid_ID}}"
                ]
              }
            },
            "response": [],
            "uid": "18615958-ae25708d-9c22-4b82-879c-df89b45deb9d"
          },
          {
            "name": "GetBooking",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "07ce3dc3-493f-4482-b3be-45031ec4de33",
                  "exec": [
                    "pm.test(\"Response status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response time is less than 500ms\", function () {\r",
                    "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response has the required fields\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.firstname).to.exist;\r",
                    "    pm.expect(responseData.lastname).to.exist;\r",
                    "    pm.expect(responseData.totalprice).to.exist;\r",
                    "    pm.expect(responseData.depositpaid).to.exist;\r",
                    "    pm.expect(responseData.bookingdates).to.exist;\r",
                    "    pm.expect(responseData.additionalneeds).to.exist;\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Checkin and checkout dates are in a valid date format\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "\r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.bookingdates.checkin).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                    "    pm.expect(responseData.bookingdates.checkout).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Content-Type header is application/json\", function () {\r",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                    "});\r",
                    ""
                  ],
                  "type": "text/javascript",
                  "packages": {}
                }
              }
            ],
            "id": "b4075be0-642b-4a6e-ba5a-eb4dbd852732",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{url}}/booking/{{valid_ID}}",
                "host": [
                  "{{url}}"
                ],
                "path": [
                  "booking",
                  "{{valid_ID}}"
                ]
              }
            },
            "response": [],
            "uid": "18615958-b4075be0-642b-4a6e-ba5a-eb4dbd852732"
          },
          {
            "name": "DeleteBooking",
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "52fe2f91-65ad-4e79-b37c-bac8a86b2de3",
                  "exec": [
                    "pm.test(\"Response status code is 201\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(201);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response content type is text/plain\", function () {\r",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response body includes the expected schema validation for a successful booking creation\", function () {\r",
                    "    pm.expect(pm.response.text()).to.include(\"Created\");\r",
                    "});\r",
                    ""
                  ],
                  "type": "text/javascript",
                  "packages": {}
                }
              }
            ],
            "id": "aa0eacba-e992-4d37-9b57-d71b8d76000b",
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            },
            "request": {
              "method": "DELETE",
              "header": [
                {
                  "key": "Cookie",
                  "value": "token=<token_value>"
                },
                {
                  "key": "Authorization",
                  "value": "Basic YWRtaW46cGFzc3dvcmQxMjM="
                }
              ],
              "url": {
                "raw": "{{url}}/booking/{{valid_ID}}",
                "host": [
                  "{{url}}"
                ],
                "path": [
                  "booking",
                  "{{valid_ID}}"
                ]
              }
            },
            "response": [],
            "uid": "18615958-aa0eacba-e992-4d37-9b57-d71b8d76000b"
          }
        ],
        "id": "18ccc626-2404-4151-9eaf-dea69cfa7f34",
        "uid": "18615958-18ccc626-2404-4151-9eaf-dea69cfa7f34"
      }
    ]
  }
}